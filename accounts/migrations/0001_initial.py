# Generated by Django 5.2.4 on 2025-10-06 11:04

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('staff', 'Front Desk Staff'), ('doctor', 'Doctor')], default='staff', max_length=10)),
                ('phone_number', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('is_active_user', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'custom_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doctor_id', models.CharField(max_length=20, unique=True)),
                ('full_name', models.CharField(max_length=200)),
                ('specialization', models.CharField(help_text='e.g., General Practice, Pediatrics, Cardiology, Dermatology', max_length=100)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('phone_number', models.CharField(max_length=17)),
                ('email', models.EmailField(max_length=254)),
                ('clinic_location', models.CharField(help_text='Clinic or hospital location', max_length=200)),
                ('consultation_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('is_available', models.BooleanField(default=True, help_text='Is the doctor currently available for appointments?')),
                ('accepts_walkins', models.BooleanField(default=True, help_text='Does the doctor accept walk-in patients?')),
                ('license_number', models.CharField(max_length=50, unique=True)),
                ('years_of_experience', models.IntegerField(default=0)),
                ('qualifications', models.TextField(blank=True, help_text='Medical degrees and certifications')),
                ('bio', models.TextField(blank=True)),
                ('date_joined', models.DateField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(blank=True, limit_choices_to={'user_type': 'doctor'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='doctor_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Doctor',
                'verbose_name_plural': 'Doctors',
                'db_table': 'doctor',
                'ordering': ['full_name'],
            },
        ),
        migrations.CreateModel(
            name='DoctorSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('slot_duration', models.IntegerField(default=30, help_text='Duration of each appointment slot in minutes')),
                ('is_active', models.BooleanField(default=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weekly_schedule', to='accounts.doctor')),
            ],
            options={
                'verbose_name': 'Doctor Schedule',
                'verbose_name_plural': 'Doctor Schedules',
                'db_table': 'doctor_schedule',
                'ordering': ['day_of_week', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='FrontDeskStaff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(max_length=20, unique=True)),
                ('shift', models.CharField(choices=[('morning', 'Morning (6 AM - 2 PM)'), ('afternoon', 'Afternoon (2 PM - 10 PM)'), ('night', 'Night (10 PM - 6 AM)')], default='morning', max_length=20)),
                ('department', models.CharField(default='Reception', max_length=100)),
                ('date_joined', models.DateField(auto_now_add=True)),
                ('user', models.OneToOneField(limit_choices_to={'user_type': 'staff'}, on_delete=django.db.models.deletion.CASCADE, related_name='staff_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Front Desk Staff',
                'verbose_name_plural': 'Front Desk Staff',
                'db_table': 'frontdesk_staff',
            },
        ),
        migrations.AddIndex(
            model_name='doctor',
            index=models.Index(fields=['specialization'], name='doctor_special_feb0f0_idx'),
        ),
        migrations.AddIndex(
            model_name='doctor',
            index=models.Index(fields=['clinic_location'], name='doctor_clinic__a9f2f2_idx'),
        ),
        migrations.AddIndex(
            model_name='doctor',
            index=models.Index(fields=['is_available'], name='doctor_is_avai_104955_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='doctorschedule',
            unique_together={('doctor', 'day_of_week', 'start_time')},
        ),
    ]
